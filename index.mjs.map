{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexTypedArray from '@stdlib/array-base-assert-is-complex-typed-array';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport isSameValueZero from '@stdlib/assert-is-same-value-zero';\n\n\n// FUNCTIONS //\n\n/**\n* Counts the number of elements in an indexed array that are equal to a specified value.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} value - search value\n* @returns {NonNegativeInteger} number of elements that are equal to a specified value\n*\n* @example\n* var x = [ 0, 0, 1, 0, 1 ];\n*\n* var n = indexed( x, 0 );\n* // returns 3\n*/\nfunction indexed( x, value ) {\n\tvar n;\n\tvar i;\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( isSameValueZero( x[ i ], value ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of elements in an accessor array that are equal to a specified value.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} value - search value\n* @returns {NonNegativeInteger} number of elements that are equal to a specified value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n*\n* var x = toAccessorArray( [ 0, 0, 1, 0, 1 ] );\n*\n* var n = accessors( x, 0 );\n* // returns 3\n*/\nfunction accessors( x, value ) {\n\tvar get;\n\tvar n;\n\tvar i;\n\n\tget = resolveGetter( x );\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( isSameValueZero( get( x, i ), value ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of elements in a complex array that are equal to a specified value.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} value - search value\n* @returns {NonNegativeInteger} number of elements that are equal to a specified value\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 0.0, 0.0, 3.0, 4.0, 0.0, 0.0 ] );\n*\n* var n = complex( x, new Complex128( 1.0, 2.0 ) );\n* // returns 1\n*/\nfunction complex( x, value ) {\n\tvar view;\n\tvar re;\n\tvar im;\n\tvar n;\n\tvar i;\n\n\tif ( !isComplexLike( value ) ) {\n\t\treturn 0;\n\t}\n\tre = real( value );\n\tim = imag( value );\n\n\tview = reinterpret( x, 0 );\n\n\tn = 0;\n\tfor ( i = 0; i < view.length; i += 2 ) {\n\t\tif ( isSameValueZero( view[ i ], re ) && isSameValueZero( view[ i+1 ], im ) ) { // eslint-disable-line max-len\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an array that are equal to a specified value.\n*\n* ## Notes\n*\n* -   The function uses the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to an implementation based on the strict equality operator `===`, the function treats `NaNs` as the same value.\n*\n* @param {Collection} x - input array\n* @param {*} value - search value\n* @returns {NonNegativeInteger} number of elements that are equal to a specified value\n*\n* @example\n* import countSameValueZero from '@stdlib/array-base-count-same-value-zero';\n*\n* var x = [ 0, 0, 1, 0, 1 ];\n*\n* var n = countSameValueZero( x, 1 );\n* // returns 2\n*/\nfunction countSameValueZero( x, value ) {\n\tif ( isAccessorArray( x, value ) ) {\n\t\tif ( isComplexTypedArray( x, value ) ) {\n\t\t\treturn complex( x, value );\n\t\t}\n\t\treturn accessors( x, value );\n\t}\n\treturn indexed( x, value );\n}\n\n\n// EXPORTS //\n\nexport default countSameValueZero;\n"],"names":["countSameValueZero","x","value","isAccessorArray","isComplexTypedArray","view","re","im","n","i","isComplexLike","real","imag","reinterpret","length","isSameValueZero","complex","get","resolveGetter","accessors","indexed"],"mappings":";;myBA6JA,SAASA,EAAoBC,EAAGC,GAC/B,OAAKC,EAAiBF,EAAGC,GACnBE,EAAqBH,EAAGC,GAjD/B,SAAkBD,EAAGC,GACpB,IAAIG,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeR,GACpB,OAAO,EAQR,IANAI,EAAKK,EAAMT,GACXK,EAAKK,EAAMV,GAEXG,EAAOQ,EAAaZ,EAAG,GAEvBO,EAAI,EACEC,EAAI,EAAGA,EAAIJ,EAAKS,OAAQL,GAAK,EAC7BM,EAAiBV,EAAMI,GAAKH,IAAQS,EAAiBV,EAAMI,EAAE,GAAKF,KACtEC,GAAK,GAGP,OAAOA,CACR,CA4BUQ,CAASf,EAAGC,GAnFtB,SAAoBD,EAAGC,GACtB,IAAIe,EACAT,EACAC,EAKJ,IAHAQ,EAAMC,EAAejB,GAErBO,EAAI,EACEC,EAAI,EAAGA,EAAIR,EAAEa,OAAQL,IACrBM,EAAiBE,EAAKhB,EAAGQ,GAAKP,KAClCM,GAAK,GAGP,OAAOA,CACR,CAuESW,CAAWlB,EAAGC,GAlHvB,SAAkBD,EAAGC,GACpB,IAAIM,EACAC,EAGJ,IADAD,EAAI,EACEC,EAAI,EAAGA,EAAIR,EAAEa,OAAQL,IACrBM,EAAiBd,EAAGQ,GAAKP,KAC7BM,GAAK,GAGP,OAAOA,CACR,CAyGQY,CAASnB,EAAGC,EACpB"}